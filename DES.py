def he(msg):
    hex={"0":"0000","1":"0001","2":"0010","3":"0011","4":"0100","5":"0101","6":"0110","7":"0111","8":"1000","9":"1001","a":"1010","b":"1011","c":"1100","d":"1101","e":"1110","f":"1111"}
    f = ""
    l = len(msg)
    for i in range(0,l):
        f = f + hex[msg[i]]
    #print(f)
    return f

def binar(msg):
    bi = {"0000":"0","0001":"1","0010":"2","0011":"3","0100":"4","0101":"5","0110":"6","0111":"7","1000":"8","1001":"9","1010":"a","1011":"b","1100":"c","1101":"d","1110":"e","1111":"f"}
    f = ""
    lis = []
    count = 0
    for i in range(0, 8):
        lis = lis + [x[count:count + 4]]
        f = f + bi[lis[i]]
        count = count + 4
    print(lis)
    # print(f)

    return f

def first_ini(msg):
    IPC = [58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,62, 54, 46, 38, 30, 22, 14, 6,64,54,48,40,32,24,16,8,57, 49, 41, 33, 25, 17, 9, 1,  59, 51, 43, 35, 27, 19, 11, 3,61, 53, 45, 37, 29, 21, 13, 5,63, 55, 47, 39, 31, 23, 15, 7]
    #print(len(PC1))
    #dec = int(msg, 16)
    #print(dec)
    #bi = bin(dec)
    #print(bi)
    #print(len(bi))
    #bi = bi.lstrip("0b")
    #print(bi)
    #if len(bi) != 64:
    #    bi = '0'+bi
    le = len(msg)
    bi = he(msg)

    le = len(IPC)
    final_s = ""
    #count = 0
    for i in range(0,le):
        #print(IPC[i]-1)
        final_s = final_s + str(bi[IPC[i]-1])
        #print(final_s)
    tem = int(final_s, 2)
    h = hex(tem).lstrip('0x')
    return h

def enco(msg):
    l = msg[:8]
    #print(l)
    r = msg[8:]
    #print(r)
    final_s = he(r)
    le = len(r)

    #print(final_s)

    count = 0
    en_tab = [32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1]
    l_f = len(en_tab)
    ret = ""
    for i in range(0,l_f):
        ret = ret + final_s[en_tab[i]-1]
    return ret,l


def xor(first,second):
    fi_s = ""
    l = len(first)
    for i in range(0,l):
        if (first[i]=='0' and second[i]=='0'):
            fi_s = fi_s + '0'
        elif (first[i]=='1' and second[i]=='1'):
            fi_s = fi_s + '0'
        elif (first[i]=='0' and second[i]=='1'):
            fi_s = fi_s + '1'
        elif (first[i]=='1' and second[i]=='0'):
            fi_s = fi_s + '1'
    return fi_s


def round(r):
    m = []
    if r == 1:
        m = [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
             [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
            [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
            [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]]
    elif r == 2:
        m = [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
            [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
            [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
             [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]]
    elif r == 3:
        m = [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
            [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
            [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
            [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]]
    elif r == 4:
        m = [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
             [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
             [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
             [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]]
    elif r == 5:
        m = [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
            [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
            [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
             [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]]
    elif r == 6:
        m = [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
             [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
             [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
             [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]]
    elif r == 7:
        m = [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
            [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
            [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
            [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]]
    elif r == 8:
        m = [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
             [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
            [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
            [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]
    return m

def s_box(x):

    hex = {"0000":"0",  "0001":"1",  "0010":"2",  "0011":"3",  "0100":"4",  "0101":"5", "0110":"6", "0111": "7",
            "1000":"8","1001": "9" , "1010":"10", "1011":"11", "1100": "12" , "13": "1101", "14": "1110", "15": "1111"}
    bi = { "0":"0", "1":"1",  "2":"2",  "3":"3",  "4":"4","5":"5",  "6":"6", "7":"7",
          "8":"8", "9":"9", "10":"a", "11":"b",  "12":"c", "13":"d", "14":"e", "15":"f"}
    row = {"00":0,"01":1,"10":2,"11":3}


    #s_li = ['s1','s2','s3','s4','s5','s6','s7','s8']
    #lis = [x[0:7],x[7:13],x[13:19],]
    count = 0
    lis = []
    for i in range(0,8):
        lis = lis + [x[count:count+6]]
        count = count + 6
    #print(lis)
    final_str = ""

    ro = 1
    for i in range(0, 8):
        s = lis[i]
        va = s[0] + s[5]
        #print(row[va])
        m = round(ro)
        #print(ind)
        index = int(row[va])
        #print(index)
        val = int(hex[s[1:5]])
        final_str = final_str + str(bi[str(m[index][val])])
        ro = ro + 1
    print(final_str)
    return he(final_str)

def aft_s_per(msg):
    m = [16, 7, 20, 21, 29, 12, 28, 17, 1,15, 23, 26, 5, 18, 31, 10,2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25]
    l = len(m)
    final_str = ""
    for i in range(0,l):
        final_str = final_str + msg[m[i]-1]
    return final_str

msg = "675a69675e5a6b5a"
#msg = "ffab213ab98acb42"
#getting initial per.....................
in1 = first_ini(msg)


s = "20ba134cdf35"
s = he(s)
b,l = enco(in1)
print(l)
x = xor(b,s)
print(x)
m = s_box(x)
f = aft_s_per(m)
c = xor(he(l),f)

